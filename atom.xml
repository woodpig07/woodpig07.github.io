<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Woodpig&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://woodpig07.github.io/"/>
  <updated>2016-08-11T15:11:33.730Z</updated>
  <id>http://woodpig07.github.io/</id>
  
  <author>
    <name>Kate Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从Redux一窥函数式编程</title>
    <link href="http://woodpig07.github.io/2016/08/08/taking-a-peek-at-functional-programming-with-redux/"/>
    <id>http://woodpig07.github.io/2016/08/08/taking-a-peek-at-functional-programming-with-redux/</id>
    <published>2016-08-08T14:02:34.000Z</published>
    <updated>2016-08-11T15:11:33.730Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前注：原文是给公司博客写的半调子英文稿，当然正式<a href="https://wiredcraft.com/blog/redux-functional-programming/" target="_blank" rel="external">发布的版本</a>是经由市场部老外同事修正润色过的，在此提供自己整理的中文版，为了表达方便，中文语句上和原文的直接翻译会有一点出入。</p>
</blockquote>
<p>我们使用<a href="https://facebook.github.io/react/index.html" target="_blank" rel="external">ReactJS</a>开发各种web应用的时候通常会需要一种整洁高效的方式来控制各个components通信，为了达到这个目的Facebook引入了<a href="https://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a>——一种支持单项数据变动的应用设计模式。<br>为了解决同样的问题，React社区里也逐渐衍生开发出其他的辅助工具库，这其中几种最流行的实现方式就包括<a href="http://redux.js.org/index.html" target="_blank" rel="external">Redux</a>。很多人推崇它的极简主义的API，以及可靠的单向数据流从而能够高效支持日志，热加载，时间旅行等功能。甚至Flux的作者们也给它很高的评价。</p>
<p>Redux的上手体验可以很直接。官网的文档有提供详细的示例代码供使用者参考，但是第一次接触Redux这种模式背后的思想会让人觉得有点陌生和奇怪，至少对我如此。</p>
<h2 id="Map-Reduce"><a href="#Map-Reduce" class="headerlink" title="Map/Reduce"></a>Map/Reduce</h2><p>先看一下一个最简单的Redux TODO APP示例，用ES6的写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125;  <span class="keyword">from</span> <span class="string">'redux'</span></div><div class="line"></div><div class="line"><span class="comment">// reducer function</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TodoApp</span>(<span class="params">state = [], action</span>) =&gt; </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">        ...state,</div><div class="line">        &#123; text: action.text &#125;</div><div class="line">      ]</div><div class="line">    <span class="keyword">case</span> <span class="string">'REMOVE_TODO'</span>:</div><div class="line">      <span class="keyword">return</span> state.slice(action.index, <span class="number">1</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// action creator</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) =&gt; </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    type: <span class="string">'ADD_TODO'</span>,</div><div class="line">    text: text  </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeTodo</span>(<span class="params">index</span>) =&gt; </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    type: <span class="string">'REMOVE_TODO'</span>,</div><div class="line">    index: index  </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(TodoApp)</div><div class="line"></div><div class="line"><span class="comment">// Dispatch actions, App state updates according to action type</span></div><div class="line">store.dispatch(addTodo(<span class="string">'Get up!'</span>))</div><div class="line">store.dispatch(addTodo(<span class="string">'Have breakfast!'</span>))</div><div class="line">store.dispatch(addTodo(<span class="string">'Go to work!'</span>))</div><div class="line">store.dispatch(removeTodo(<span class="number">0</span>))</div></pre></td></tr></table></figure></p>
<p>在上面的示例中，作为reducer函数的<code>TodoApp</code>是应用的核心store，它包含了应用当前的状态（state）数据。你在应用程序的任何一个地方发出的调度功能（dispatch actions），都需要通过相应的reducer处理后返回一个更新后个state。</p>
<p>比如示例代码运行后的应用state便是：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'Have</span> breakfast!', <span class="symbol">'Go</span> to work!']</div></pre></td></tr></table></figure></p>
<p>在实际的TODO工具应用里，一个TODO清单往往需要描述更多的状态细节，比如我们需要区分开完成和未完成的项目。这时候程序的state对象可以是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">todos</span>: [</div><div class="line">    &#123;text: <span class="string">'Have breakfast!'</span>, done: true&#125;,</div><div class="line">    &#123;<span class="attribute">text</span>: <span class="string">'Go to work!'</span>, done: false&#125;</div><div class="line">  ],</div><div class="line">  <span class="selector-tag">highlighted</span>: <span class="selector-tag">all</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相应的我们得添加用来改动每个清单项目对象中<code>done</code>布尔值的action函数，还有用来改动高亮的项目种类的action函数。</p>
<p>现在你可以看到，比起Flux中可以有多个store，Redux只用一个store来装载整个应用程序的数据，它的调度（dispatcher）机制也不是基于事件分发（event-emitter）。Redux是让用户自己写的reducer函数来决定不同的action如何更新应用状态。</p>
<p>这里有人会问：这模式是不是有点像所谓的map/reduce？是的，熟悉JavaScript的开发者会知道JS语言的原生API于某种程度上支持map/reduce特性。</p>
<p>比如JS的数组函数<code>map</code>就是遍历每个数组项目做相应的操作。<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'Alpha</span>', <span class="symbol">'Beta</span>', <span class="symbol">'Omega</span>'].map((<span class="name">item</span>) =&gt; &#123;</div><div class="line">  return <span class="symbol">'Hello</span> ' + item</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>相似的功能也可以用<code>for</code>循环实现，只是要麻烦一些：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var names = [<span class="string">'Alpha'</span>, <span class="string">'Beta'</span>, <span class="string">'Omega'</span>];</div><div class="line">var tmp = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; names.<span class="built_in">length</span>; <span class="built_in">i</span>++ ) &#123;</div><div class="line">  tmp.push(<span class="string">'Hello '</span> + names[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是<code>map</code>函数并不会对其遍历的数组本身做任何结构性的改变，而另外一个数组函数<code>reduce</code>也能遍历数组成员，但会彻底改变数组本身。<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">'Alpha</span>', <span class="symbol">'Beta</span>', <span class="symbol">'Omega</span>'].reduce((<span class="name">prev</span>, next) =&gt; &#123;</div><div class="line">  return prev + ', ' + next</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>同样的用<code>for</code>循环实现：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = [<span class="string">'Alpha'</span>, <span class="string">'Beta'</span>, <span class="string">'Omega'</span>];</div><div class="line"><span class="keyword">var</span> tmp = <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.length; i++ ) &#123;</div><div class="line">  <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</div><div class="line">    tmp = tmp + names[<span class="number">0</span>]</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    tmp = tmp + <span class="string">','</span> + names[<span class="number">0</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个时候你看Redux的reducer函数是不是很像数组的reduce函数中的回调函数<code>Array.reduce(callback)</code>？两者都需要两个参数，前一个表示之前的计算结果，后一个数值会随后被函数整合到之前的计算结果里，从而返回新的计算结果。</p>
<p>其实MAP/REDUCE是比较有名的函数式编程特性。但对于不熟悉函数式编程的人来说，这种风格有时会看起来像是反传统的黑魔法。</p>
<h2 id="JavaScript里的函数式编程"><a href="#JavaScript里的函数式编程" class="headerlink" title="JavaScript里的函数式编程"></a>JavaScript里的函数式编程</h2><p>严格的说JS不是一门真正的函数式编程语言，但是它的某些语言特性能够让开发者借助函数式编程的技法。</p>
<h3 id="高阶函数（High-order-function）"><a href="#高阶函数（High-order-function）" class="headerlink" title="高阶函数（High order function）"></a>高阶函数（High order function）</h3><p>我们都知道JS里的函数被成为<code>fisrt class citizen</code>，函数同时也是对象，意味着函数可以作为另外一个函数的参数，或者另外一个函数的返回值。Ajax的回调函数就是一个典型的例子。那种接受回调函数为参数，又返回另外一个新函数的函数我们称之为高阶函数。我们可以利用这种函数做一种叫做<code>柯里化</code>的东东。</p>
<h3 id="柯里化（currying）"><a href="#柯里化（currying）" class="headerlink" title="柯里化（currying）"></a>柯里化（currying）</h3><p>柯里化是一种技巧，它先接受一部分参数来形成另一个接受余下参数的函数。比如说我们需要一个函数来做两个数值的加法计算，它的形式必须是：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fn(<span class="name">x</span>)(<span class="name">y</span>)</div></pre></td></tr></table></figure></p>
<p>柯里化的实现就是：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">CurriedAdd</span>(x) =&gt; (y) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">x</span> + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们也可以用一种通用的函数来转换一个普通函数到柯里化的形式：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span><span class="params">(fn, n)</span> </span>&#123;</div><div class="line">  n = n || fn.length</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span><span class="params">(arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> fn(arg)</div><div class="line">    <span class="keyword">return</span> curry(fn.bind(<span class="keyword">this</span>, arg), n - <span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样上面的<code>CurriedAdd</code>函数的例子，可以是一个普通函数被<code>curry</code>的改造结果：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(x, y)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line">curry(add) <span class="comment">// convert add to CurriedAdd</span></div></pre></td></tr></table></figure></p>
<p>实际上还有更精巧复杂的柯里化改造函数的实现方法，例如<a href="https://github.com/dominictarr/curry" target="_blank" rel="external"><code>dominictarr/curry</code></a>和<a href="https://lodash.com/docs#curry" target="_blank" rel="external"><code>lodash.curry</code></a>.强烈推荐看它们的源码学习。 </p>
<h3 id="函数组合（Compose）"><a href="#函数组合（Compose）" class="headerlink" title="函数组合（Compose）"></a>函数组合（Compose）</h3><p>在面向对象编程的体系里，两种常见的设计概念<code>组合</code>（composition）和<code>聚合</code>（composition）是用来指导如何整合多个对象到一个新的对象。JS的高阶函数特性能让我们更灵活的方式做相似的事情。</p>
<p>比如我们有个函数能接受两个函数作为参数，然后返回的新函数会把作为参数的函数来组合处理后来输入的数据：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var compose = <span class="function"><span class="params">(fn1, fn2)</span> =&gt;</span> (x) =&gt; &#123; <span class="keyword">return</span> fn1(fn2(x)); &#125;</div></pre></td></tr></table></figure></p>
<p>用一个更具体化的例子：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var toUppercase = <span class="function"><span class="params">(str)</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> str.toUpperCase();</div><div class="line">&#125;;</div><div class="line">var strongify = <span class="function"><span class="params">(str)</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;strong&gt;'</span> + str + <span class="string">'&lt;/strong&gt;'</span>;</div><div class="line">&#125;;</div><div class="line">var highlight = compose(strongify, toUppercase);</div></pre></td></tr></table></figure></p>
<p>Compose的独特之处还在于它能继续组合组合后的新函数：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var prefix = <span class="function"><span class="params">(str)</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'Headline: '</span> + str;</div><div class="line">&#125;;</div><div class="line">compose(prefix, compose(strongify, toUppercase));</div></pre></td></tr></table></figure></p>
<p>Compose处理输入数据的形式很像<code>PIPE</code>,而且处理的顺序是从左到右，基于这些特点我们能得出以下等式：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compose(<span class="name">prefix</span>, compose(<span class="name">strongify</span>, toUppercase)) = compose(<span class="name">compose</span>(<span class="name">prefix</span>, strongify), toUppercase)</div></pre></td></tr></table></figure></p>
<p>然后我们能进一步推出Compose的加强版本-组合两个以上的函数：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">enhancedCompose</span><span class="params">(arg)</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> n = arg.length;</div><div class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) &#123;</div><div class="line">    <span class="keyword">return</span> compose(arg);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</div><div class="line">    <span class="keyword">return</span> enhancedCompose(compose(arg[n<span class="number">-1</span>], arg[n]));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">longCompose(prefix, strongify, toUppercase);</div></pre></td></tr></table></figure></p>
<p>到此我们已经了解了几个基本的函数式编程技巧。下一步我们来探讨一下Redux是如何实现它们的。</p>
<h2 id="Redux里的函数式编程"><a href="#Redux里的函数式编程" class="headerlink" title="Redux里的函数式编程"></a>Redux里的函数式编程</h2><p>本文开头已经提到Redux的思想哲学和map/redux的关联，其实它的实现细节更能体现它的函数式之魂。</p>
<h3 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators()"></a>bindActionCreators()</h3><p>之前那个TODO APP的例子里，我们需要store实体上的dispatch函数来调用action creatror函数，这样的方式需要调用的地方保存对store实体对象的引用。有的情况下，我们会需要隐藏store实体对象来隐藏实现细节，这时可以利用函数式Compose风格来做一个绑定后的action creator函数：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var boundAddTodo = (<span class="name">text</span>) =&gt; dispatch(<span class="name">addTodo</span>(<span class="name">text</span>))</div><div class="line">var boundRemoveTodo = (<span class="name">index</span>) =&gt; dispatch(<span class="name">removeTodo</span>(<span class="name">index</span>))</div></pre></td></tr></table></figure></p>
<p>这同样也是Redux 提供的<a href="http://redux.js.org/docs/api/bindActionCreators.html" target="_blank" rel="external"><code>bindActionCreators(actionCreators, dispatch)</code></a>的实现目的。</p>
<h3 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h3><p>Redux也提供中间件的接口支持，中间件方法能在action被调出之后，reducer更新state状态之前做你指定的工作。比如Redux<a href="http://redux.js.org/docs/advanced/Middleware.html" target="_blank" rel="external">官方指导文档</a>里给出的一个日志中间件：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Logs all actions and states after they are dispatched.</div><div class="line"> */</div><div class="line">const logger = store =&gt; next =&gt; <span class="built_in">action</span> =&gt; &#123;</div><div class="line">  console.<span class="built_in">group</span>(<span class="built_in">action</span>.<span class="built_in">type</span>)</div><div class="line">  console.info(<span class="string">'dispatching'</span>, <span class="built_in">action</span>)</div><div class="line">  let result = next(<span class="built_in">action</span>)</div><div class="line">  console.<span class="built_in">log</span>(<span class="string">'next state'</span>, store.getState())</div><div class="line">  console.groupEnd(<span class="built_in">action</span>.<span class="built_in">type</span>)</div><div class="line">  return result</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>显然那就是柯里化函数。</p>
<p>Redux用来注册应用中间件的函数叫<code>applyMiddleware</code>：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let store = creatStore(<span class="name">rootReducer</span>, applyMiddleware(<span class="name">middleware1</span>, middleware2...))</div></pre></td></tr></table></figure></p>
<p>其实<code>applyMiddleware</code>的<a href="https://github.com/reactjs/redux/blob/master/src/createStore.js#L49" target="_blank" rel="external">实现代码</a>更是大写的柯里化！<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let createStoreWithMiddleware = applyMiddleware(<span class="name">middleware1</span>, middleware2...)(<span class="name">createStore</span>)</div><div class="line">let store = createStoreWidtMiddleware(<span class="name">rootReducer</span>)</div></pre></td></tr></table></figure></p>
<p>注意看这一处<a href="https://github.com/reactjs/redux/blob/master/src/applyMiddleware.js#L29" target="_blank" rel="external">实现代码</a>，又是熟悉的<code>compose</code>味道，这里的compse跟前文解释的compose是一模一样的功能。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">chain</span> = middlewares.map(middleware =&gt; middleware(middlewareAPI))</div><div class="line"><span class="attr">dispatch</span> = compose(...chain)(store.dispatch)</div></pre></td></tr></table></figure></p>
<h3 id="不可变性（Immutability）"><a href="#不可变性（Immutability）" class="headerlink" title="不可变性（Immutability）"></a>不可变性（Immutability）</h3><p>纯粹的函数式编程排斥可变的数据。数据的不可变性表示开发者只有用改变数值引用的情况下“改变”数据。除此之外函数式编程还强调所有的函数必须是纯粹的（pure function），它的意思是，给予不变的输入数据，任何情况下函数返回的必须是同样的输出。prue函数不能有任何对外部环境的依赖，因为外部依赖可能带来潜在的副作用。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// not pure</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span><span class="params">(x)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> x &gt; a;</div><div class="line">&#125;</div><div class="line"><span class="comment">//pure</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pureCompare</span><span class="params">(x)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> x &gt; a</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Redux也在其<a href="http://redux.js.org/docs/introduction/ThreePrinciples.html" target="_blank" rel="external">基本编程原则</a>的说明里强调以上的基本需求。</p>
<blockquote>
<p>State is read-only The only way to mutate the state is to emit an action, an object describing what happened.<br>（应用）状态是只读的，只有发出action——一种描述当前情况的对象才能改变状态。<br>Changes are made with pure functions To specify how the state tree is transformed by actions, you write pure reducers.<br>只有纯粹函数能指定状态树是如何被actions改变的，你必须写纯粹的reducer函数。</p>
</blockquote>
<p>Redux的reducer函数不是改变（mutate）先前的状态对象，相反它返回的是一个新的状态对象。当Redux配合ReactJs一起使用时，这种不可变性给予了性能上提高，因为React假设component的state和props对象都是不可变的数据，只要检测到对象的引用（reference）不变，它就不会做无意义的re-render</p>
<h2 id="用JavaScript做函数式编程"><a href="#用JavaScript做函数式编程" class="headerlink" title="用JavaScript做函数式编程"></a>用JavaScript做函数式编程</h2><p>到此我已经试着介绍一些函数式编程最基础的风格和技巧。如果你有兴趣继续研究这方面JS的相关内容，我也想先列出一些我理解的得与失：</p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>函数式编程风格通常会意味着更简洁的申明式的代码。</li>
<li>函数式编程的代码结构上更容易测试，应为它强调pure functions，这样数据和函数是松耦合的。而传统的面向对象编程里，你得用对象来代表抽象数据。函数式编程只需要你需要关注函数，相对而言，阅读代码的人更容易理解代码是在解决什么问题，然后写单元测试提供输入数据即可。</li>
</ul>
<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul>
<li>JS不是一门像Lisp或者Haskell的纯粹的函数式编程语言，它缺乏对不可变数据的原生支持。譬如为了避免在改变数据的时候改变代表数据的变量，我们得先做一个变量数值的副本再给其引用。特别是在应对好几层嵌套的对象，做它的一个副本的过程中需要产生好几个临时的对象，过程完毕后还要等垃圾回收来回收它们。这种密集操作多了，对于性能也是一个损失。好的方面是，市面上有<a href="http://facebook.github.io/immutable-js/" target="_blank" rel="external">Immutatble.js</a>和 <a href="http://swannodette.github.io/mori/" target="_blank" rel="external">Mori.js</a>这种工具来帮忙提高效率。</li>
<li>函数式编程有一定程度上的复杂性，相对的面向对象编程比较符合人脑认识物理世界的思维方式。当然这只能算一种主观性的判断，不是所有人都有相同感受。但是目前来说，面向对象编程仍然算是业界主流。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前注：原文是给公司博客写的半调子英文稿，当然正式&lt;a href=&quot;https://wiredcraft.com/blog/redux-functional-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发
    
    </summary>
    
      <category term="functional programming" scheme="http://woodpig07.github.io/categories/functional-programming/"/>
    
      <category term="javascript" scheme="http://woodpig07.github.io/categories/functional-programming/javascript/"/>
    
    
      <category term="reactjs" scheme="http://woodpig07.github.io/tags/reactjs/"/>
    
      <category term="redux" scheme="http://woodpig07.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>老项目的优化</title>
    <link href="http://woodpig07.github.io/2015/12/20/what-it-takes-to-optimize-an-old-project/"/>
    <id>http://woodpig07.github.io/2015/12/20/what-it-takes-to-optimize-an-old-project/</id>
    <published>2015-12-20T09:33:51.000Z</published>
    <updated>2016-08-11T15:07:48.642Z</updated>
    
    <content type="html"><![CDATA[<p>知乎上有一则问答，<a href="http://www.zhihu.com/question/37905339" target="_blank" rel="external">QQ空间的前端技术水平如何？</a>，题主吐槽一个页面的初始化就<code>加载了114个javascript文件</code>，进而质疑负责前端开发维护的工程师为何不遵循<code>尽量合并请求</code>的性能优化原则。于是下面涌现了各种相关的和不相关的前端人员纷纷解释对于一个历史长达十年的老项目种种妥协做法的历史原因。<br>正好前一阵子尝试过将本司的一个老项目的前端代码优化，其中经历有些许类似之处，在此作个简单回顾。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>老项目说老也不算太老，从第一版来算已经有两年多，我是从第二版开发之初（也就是一年多以前）加入这个项目。那个时候改版的目的除了大量的外观设计上需求改动，另外还增加在线预订下单的功能，加上大部分前后端开发成员都是新加入项目不久，大家都决定将代码回炉重造。即便如此，前端这边仍旧保留了一部分旧的功能模块，而且它们还依赖于几个只能用componentjs管理的第三方js库。<br>componentjs作为上一代包管理工具，它比稍后才流行于前端业界的bower还多了一个模块化的范式，这里的模块化类似于commonjs，但每个模块会有自己的<code>component.json</code>文件来帮助下载并编译依赖模块。这部分代码在最开始独立打包压缩出js,css文件后便放置不动了。<br>新代码的第三方包管理工具采用bower, 下载的文件用<code>&lt;script&gt;</code>在页面上一个个分别引用。<br>然后我们自己写的模块放在某个目录下，模块文件之间互有依赖关系，按理说可以考虑用require.js或者sea.js等工具来管理，但因为当时拼命赶进度，加上后端也需要写部分js来调用前端的模块，前端就放弃这块的优化工作，直接将各个模块暴露为全局变量，按照依赖循序一个个在页面引用加载。</p>
<p>大致的前端项目结构简图如下，其中modules那部分文件接近20个，外部依赖10来个，这些还不算后端加的一坨其他。。。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── README<span class="selector-class">.md</span></div><div class="line">├── bower<span class="selector-class">.json</span></div><div class="line">├── bower_components</div><div class="line">│   ├── ...</div><div class="line">├── component<span class="selector-class">.json</span></div><div class="line">├── components</div><div class="line">│   ├── ...</div><div class="line">├── gulpfile<span class="selector-class">.js</span></div><div class="line">├── package<span class="selector-class">.json</span></div><div class="line">├── site</div><div class="line">│   ├── static</div><div class="line">│   │   ├── css</div><div class="line">│   │   │   ├── component<span class="selector-class">.css</span></div><div class="line">│   │   │   ├── component<span class="selector-class">.min</span><span class="selector-class">.css</span></div><div class="line">│   │   │   ├── index<span class="selector-class">.css</span></div><div class="line">│   │   │   ├── index<span class="selector-class">.min</span><span class="selector-class">.css</span></div><div class="line">│   │   │   └── pages</div><div class="line">│   │   │       ├── page1<span class="selector-class">.css</span></div><div class="line">│   │   │       ├── page2<span class="selector-class">.css</span></div><div class="line">│   │   │       ├── page3<span class="selector-class">.css</span></div><div class="line">│   │   │       ├── ...</div><div class="line">│   │   ├── <span class="selector-tag">img</span></div><div class="line">│   │   │   ├── ...</div><div class="line">│   │   ├── js</div><div class="line">│   │   │   ├── component<span class="selector-class">.js</span></div><div class="line">│   │   │   ├── component<span class="selector-class">.min</span><span class="selector-class">.js</span></div><div class="line">│   │   │   ├── main<span class="selector-class">.js</span></div><div class="line">│   │   │   ├── main<span class="selector-class">.min</span><span class="selector-class">.js</span></div><div class="line">│   │   │   ├── modules</div><div class="line">│   │   │   │   ├── mod1</div><div class="line">│   │   │   │   │   └── mod1<span class="selector-class">.js</span></div><div class="line">│   │   │   │   ├── mod2</div><div class="line">│   │   │   │   │   └── mod2<span class="selector-class">.js</span></div><div class="line">│   │   │   │   ├── mod3</div><div class="line">│   │   │   │   │   └── mod3<span class="selector-class">.js</span></div><div class="line">│   │   │   ├── pages</div><div class="line">│   │   │   │   ├── page1<span class="selector-class">.js</span></div><div class="line">│   │   │   │   ├── page2<span class="selector-class">.js</span></div><div class="line">│   │   │   │   ├── page3<span class="selector-class">.js</span></div><div class="line">│   │   │   └── vendor</div><div class="line">│   │   │       ├── ...</div><div class="line">│   ├── page1<span class="selector-class">.html</span></div><div class="line">│   ├── page2<span class="selector-class">.html</span></div><div class="line">│   ├── page3<span class="selector-class">.html</span></div><div class="line">│   │── ...</div><div class="line">├── source</div><div class="line">│   ├── coffee</div><div class="line">│   │   └── main<span class="selector-class">.coffee</span></div><div class="line">│   ├── jade</div><div class="line">│   │   ├── base</div><div class="line">│   │   │   ├── <span class="selector-tag">footer</span><span class="selector-class">.jade</span></div><div class="line">│   │   │   ├── <span class="selector-tag">header</span><span class="selector-class">.jade</span></div><div class="line">│   │   │   ├── layout<span class="selector-class">.jade</span></div><div class="line">│   │   ├── inc</div><div class="line">│   │   │   ├── mixins</div><div class="line">│   │   │   ├── scripts<span class="selector-class">.jade</span></div><div class="line">│   │   │   ├── stylesheets<span class="selector-class">.jade</span></div><div class="line">│   │   │   └── variables<span class="selector-class">.jade</span></div><div class="line">│   │   ├── pages</div><div class="line">│   │   │   ├── page1</div><div class="line">│   │   │   │   ├── page1<span class="selector-class">.coffee</span></div><div class="line">│   │   │   │   ├── page1<span class="selector-class">.jade</span></div><div class="line">│   │   │   │   └── page1<span class="selector-class">.styl</span></div><div class="line">│   │   │   ├── page2</div><div class="line">│   │   │   │   ├── page2<span class="selector-class">.coffee</span></div><div class="line">│   │   │   │   ├── page2<span class="selector-class">.jade</span></div><div class="line">│   │   │   │   └── page2<span class="selector-class">.styl</span></div><div class="line">│   │   │   ├── page3</div><div class="line">│   │   │   │   ├── page3<span class="selector-class">.coffee</span></div><div class="line">│   │   │   │   ├── page3<span class="selector-class">.styl</span></div><div class="line">│   │   │   │   └── page3<span class="selector-class">.jade</span></div><div class="line">│   │   │   ├── ...</div><div class="line">│   ├── modules</div><div class="line">│   │   ├── mod1</div><div class="line">│   │   │   └── mod1<span class="selector-class">.coffee</span></div><div class="line">│   │   ├── mod2</div><div class="line">│   │   │   ├── mod2<span class="selector-class">.coffee</span></div><div class="line">│   │   │   ├── mod2<span class="selector-class">.jade</span></div><div class="line">│   │   │   └── mod2<span class="selector-class">.styl</span></div><div class="line">│   │   ├── mod3</div><div class="line">│   │   │   └── mod3<span class="selector-class">.coffee</span></div><div class="line">│   │   ├── ...</div><div class="line">│   └── stylus</div><div class="line">│       ├── base</div><div class="line">│       │   ├── ...</div><div class="line">│       ├── index<span class="selector-class">.styl</span></div><div class="line">│       ├── inc</div><div class="line">│       │   ├── ...</div><div class="line">│       └── <span class="selector-tag">section</span></div><div class="line">│           ├── ...</div></pre></td></tr></table></figure></p>
<p>看到这里恐怕许多同行们要吐槽了，那么多js文件，要一个一个引用加载，还得手动维护依赖，坑爹啊！！<br>没办法，当时水平有限时间有限精力有限，而且项目上线后客户也不愿意额外付钱让我们继续优化啊（揍～）</p>
<p>此后的一年多里，我也是有一搭没一搭作一点维护工作。而同时在其它后来开始的新项目里，使用基于npm, browserfy的模块化管理给我带来极大的便捷，加上看了几篇<a href="http://webpack.github.io/" target="_blank" rel="external">webpack</a>的安利文章，我突然对用新工具极速改造优化旧工程产生了极大的信心。<br>改造的目的无非是针对我在上文里提到的几处缺陷：</p>
<ul>
<li>统一新老代码模块化的方式。</li>
<li>借助工具优雅的管理模块依赖。</li>
<li>自动打包合并代码，即使做不到一次打包所有，至少做到分开项目代码和第三方库的两个包。</li>
</ul>
<p>所谓极速改造，包括以下几个条件：</p>
<ul>
<li>对旧有模块的代码修改量最少</li>
<li>不需要改动第三方库的代码（比如说强行改源代码来支持commonjs/amd/umd)</li>
<li>折腾的时间最少（因为这不是工作计划内的需求，只能利用一些零碎时间实验我的方案）</li>
</ul>
<h2 id="走起"><a href="#走起" class="headerlink" title="走起"></a>走起</h2><h3 id="Bower"><a href="#Bower" class="headerlink" title="Bower"></a>Bower</h3><p>我挑了个自以为容易入手的方面作为改造的第一步：将Bower管理的第三方库整合到npm。<br>Bower曾经是流行一时的前端包管理工具，只不过近年来越来越被npm抢了风头。<a href="https://github.com/bower/bower/pull/1748#issuecomment-150104311" target="_blank" rel="external">最近还被曝出Bower的开发项目背后并无稳定资金来源支撑，核心开发人员仅为一人，而且能无偿贡献出的开发时间精力十分有限</a>。大家纷纷感到Bower离完全被npm取代寿终正寝的时日不远了。。。因此尽早把项目流程中有关Bower的部分完全迁移到npm也应是合理之举。<br>尽管许多流行的前端库或者是框架支持使用npm下载安装，但是！！这种做法的前提是必须符合npm里<a href="https://docs.npmjs.com/cli/install#description" target="_blank" rel="external">package的定义</a>，简而言之就是必须有一个合格的package.json文件。而这里的项目bower.json列出的三方库里有几个只是列出文件下载的链接，bower可以直接从url下载，npm却不能。好吧，bower.json这部分我暂且不动，去看component.json</p>
<h3 id="Componentjs"><a href="#Componentjs" class="headerlink" title="Componentjs"></a>Componentjs</h3><p><a href="https://github.com/componentjs/component" target="_blank" rel="external">Componentjs</a>的历史和bower的差不多都可以追溯到2012年，但它的名气远不及后者，就连原作者也于今年年中在github上声明已经放弃了维护，直接推荐用webpack，jspm，browserify取代。<br>我对Componentjs的理解是，它是前端库的包管理器+component化管理+commonjs前端实现+build工具的奇怪混合，其实这四个方面都是前端工程化的热点，只可惜componentjs的做法在这四个方面的影响力都不足以打败同类工具，落得今天的境地也不足为奇。<br>如前文所说，关联到componentjs的这部分代码是从老项目第一版继承下来的，之所以改版之初没有重写这些模块，就是因为这些模块的功能较为复杂，而且依赖其他的遵循componentjs形式的库太多，改写起来工作量大。<br>一年后回头来看，既然componentjs的模块也符合commonjs模式，可否利用browserify, webpack这种支持commonjs的工具直接或者在此基础上的某插件整合？<br>browserify马上被我否决了，原因是browerify需要每一个依赖库都有一个合格的package.json（可以用npm安装），或者是模块逐个逐个作为shim设置。这里实际的工作量可不小，例如component.json列出的某个依赖<code>&quot;component-pro/tip&quot;: &quot;2.0.0&quot;</code>，我数了下，它背后的依赖模块就有20多个…<br>至于webpack，令人惊喜的是它的官方文档列出了和componentjs相配合的插件<a href="https://github.com/webpack/component-webpack-plugin" target="_blank" rel="external">component-webpack-plugin</a>。不过，按照官方<a href="https://github.com/webpack/webpack/tree/master/examples/component" target="_blank" rel="external">实例</a>上手一用，尽是模块无法解析之类的错误：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Module not <span class="string">found:</span> <span class="string">Error:</span> Cannot resolve module <span class="string">'tip'</span> <span class="keyword">in</span> <span class="regexp">/xxxx/</span>xxxx</div></pre></td></tr></table></figure></p>
<p>细细看插件源码，才发现至少两个大问题：</p>
<ol>
<li>插件是两年前开发，后来componentjs升级，安装的模块路径有改动，插件原有的路径解析方式不再适用。<br>某个开发者提交的<a href="https://github.com/webpack/component-webpack-plugin/pull/6" target="_blank" rel="external">pull requrest</a>有详细的问题说明和解决方法。</li>
<li>插件是从各个模块js脚本里读取require的模块信息并试图解析路径，如果脚本文件里的模块名和component.json里的有差异，插件就无法对其正确的解析。<br>例如<a href="https://github.com/component/to-function" target="_blank" rel="external"><code>component/to-function</code></a>里<a href="https://github.com/component/to-function/commits/master/index.js" target="_blank" rel="external"><code>index.js</code></a>有一段定义依赖的代码，为了向后兼容老的命名，写成：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> expr;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">expr = <span class="built_in">require</span>(<span class="string">'props'</span>);</div><div class="line">&#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">expr = <span class="built_in">require</span>(<span class="string">'component-props'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>componentjs本身只会按照模块本身component.json列出的依赖下载安装，然后在build过程中会自动识别哪个是能解析的模块，所以最后这段会改写成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> expr;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  expr = <span class="built_in">require</span>(<span class="string">'component~props@1.1.2'</span>);</div><div class="line">&#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">  expr = <span class="built_in">require</span>(<span class="string">'component~props@1.1.2'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>遗憾的是component-webpack-plugin从诞生之后就没能跟上componentjs的演化步伐。一年前某个维护人员曾经<a href="https://github.com/webpack/component-webpack-plugin/issues/5" target="_blank" rel="external">提议提出要改写插件读取模块名字的方式</a>，但后来也不了了之。这件事也从侧面说明，生辟小众的开源工具能吸引到的开发力量非常之少，往往无法与时俱进。</p>
<h3 id="剩下的工作"><a href="#剩下的工作" class="headerlink" title="剩下的工作"></a>剩下的工作</h3><p>以上罗嗦了那么多，总结起来也就四个字：无功而返。接下来我只能做一些技术上无甚悬念的工作来挽回一些颜面了。</p>
<p>如果你之前的代码不会与某些模块化管理工具强耦合，改写起来十分容易。个人偏爱commonjs的简洁，这样的话对于<code>source/modules/</code>文件夹里每个模块基本上就只需多加一行代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = mod1</div></pre></td></tr></table></figure></p>
<p>然后在<code>source/coffee/main.coffee</code>文件里一一声明<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果需要在页面上引用模块，可暴露为全局变量</span></div><div class="line"><span class="built_in">window</span>.mod1 = mod1 = <span class="built_in">require</span> <span class="string">"../modules/mod1/mod1.coffee"</span></div></pre></td></tr></table></figure></p>
<p>目前项目用gulp作为自动化流程工具，与webpack结合使用十分方便（也可以用browserify替代）：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulpWebpack = <span class="built_in">require</span>(<span class="string">'webpack-stream'</span>)；</div><div class="line">gulp.src(<span class="string">'source/coffee/main.coffee'</span>)</div><div class="line">      .pipe(gulpWebpack(&#123;</div><div class="line">        <span class="keyword">module</span>: &#123;</div><div class="line">          loaders: [</div><div class="line">            &#123;test: <span class="regexp">/\.coffee$/</span>, loader: <span class="string">"coffee-loader"</span> &#125;,</div><div class="line">          ],</div><div class="line">        &#125;,</div><div class="line">        output: &#123;</div><div class="line">          path: path.join(__dirname, <span class="string">"site/static/js"</span>),</div><div class="line">          filename: <span class="string">'main.js'</span></div><div class="line">        &#125;,</div><div class="line"></div><div class="line">      &#125;))</div><div class="line">      .pipe(gulp.dest(buildPath + <span class="string">'js/'</span>));</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>上面的代码负责通过入口文件<code>main.coffee</code>把<code>modules/</code>文件夹下近20个coffee模块打包到了一个文件。</p>
<p>我还可以用<code>gulp-concat</code>把bower.json里列出的第三方依赖打包在一起，因为其中几个库之间互有依赖关系，所以要稍微手动控制一下文件的先后顺序。这样做的代价是每个页面都必须引用这一个打包后的文件，而不是像过去那样每个页面上只引用必须用到的库。不过比起过去每个页面上N多个http请求数和不得不分别维护每个页面上的第三方库依赖，权衡改动后的代价和进步还是能够算得上微小的优化的。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>写到这里，大家恐怕也看得出来，我这篇文章与其是在分享技术，不如说是举例说明优化一个老项目的种种困难障碍。<br>在前端技术日新月异的年代，过一段时间以新标准看旧代码，往往会觉得旧的东西貌似有巨大的优化空间。而实际上跨越新旧工具的路并不如开始想象的那样通畅，很多时候为了达到改进的目的要花费的努力不亚于重写项目，特别是诸如像知乎问题里的历史长久的项目，还要面临接手人员不是最开始的开发人员的各种历史包袱。但作为开发人员，即使对现实作出种种妥协，时不时思考一下改造提升老项目的可能性还是受益匪浅的，明白过去在架构和技术选型上的种种缺陷，才能在新的项目中写出future proof的代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知乎上有一则问答，&lt;a href=&quot;http://www.zhihu.com/question/37905339&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QQ空间的前端技术水平如何？&lt;/a&gt;，题主吐槽一个页面的初始化就&lt;code&gt;加载了114个jav
    
    </summary>
    
      <category term="frontend" scheme="http://woodpig07.github.io/categories/frontend/"/>
    
      <category term="project management" scheme="http://woodpig07.github.io/categories/frontend/project-management/"/>
    
    
      <category term="frontend" scheme="http://woodpig07.github.io/tags/frontend/"/>
    
      <category term="webflow" scheme="http://woodpig07.github.io/tags/webflow/"/>
    
  </entry>
  
  <entry>
    <title>Javascript永远的Class争论</title>
    <link href="http://woodpig07.github.io/2015/10/25/the-never-ending-Class-debate-in-Javascript/"/>
    <id>http://woodpig07.github.io/2015/10/25/the-never-ending-Class-debate-in-Javascript/</id>
    <published>2015-10-25T15:46:03.000Z</published>
    <updated>2016-08-11T15:11:27.402Z</updated>
    
    <content type="html"><![CDATA[<p>今年刚定稿的ECMAScript6(以下简称ES6)里，前所未有的引入了class的概念。我们都知道javascript从诞生之初就不是基于class的语言，但随着它越来越流行，使用者越来越多的过程中，关于如何用javascript进行面向对象编程(OOP)的理论也在实践中逐渐演化。特别是一些有其他后端语言（诸如java）背景的开发者，会倾向于推行模仿class类型继承的方法。<br>比如汇集了各种javascript语法糖的<a href="http://coffeescript.org/" target="_blank" rel="external">coffeescript</a>，它构造出来的class语法就是一个比较成熟的例子：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></div><div class="line">  constructor: (<span class="meta">@name</span>) -&gt;</div><div class="line"></div><div class="line">  move: (meters) -&gt;</div><div class="line">    alert <span class="meta">@name</span> + <span class="string">" moved #&#123;meters&#125;m."</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line">  move: -&gt;</div><div class="line">    alert <span class="string">"mow..."</span></div><div class="line">    <span class="keyword">super</span> <span class="number">5</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mice</span> <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line">  move: -&gt;</div><div class="line">    alert <span class="string">"zhizhi..."</span></div><div class="line">    <span class="keyword">super</span> <span class="number">45</span></div><div class="line"></div><div class="line">jerry = <span class="keyword">new</span> <span class="type">Cat</span> <span class="string">"Jerry the Cat"</span></div><div class="line">tom = <span class="keyword">new</span> <span class="type">Mice</span> <span class="string">"Tom the Mice"</span></div><div class="line"></div><div class="line">jerry.move()</div><div class="line">tom.move()</div></pre></td></tr></table></figure>
<p>编译成ECMAScript5便是<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> Animal, Cat, Mice, jerry, tom,</div><div class="line">  extend = <span class="function"><span class="keyword">function</span>(<span class="params">child, parent</span>) </span>&#123; <span class="keyword">for</span> (<span class="built_in">var</span> key <span class="keyword">in</span> <span class="built_in">parent</span>) &#123; <span class="keyword">if</span> (hasProp.call(<span class="built_in">parent</span>, key)) child[key] = <span class="built_in">parent</span>[key]; &#125; <span class="function"><span class="keyword">function</span> <span class="title">ctor</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.constructor = child; &#125; ctor.prototype = <span class="built_in">parent</span>.prototype; child.prototype = <span class="keyword">new</span> ctor(); child.__super__ = <span class="built_in">parent</span>.prototype; <span class="keyword">return</span> child; &#125;,</div><div class="line">  hasProp = &#123;&#125;.hasOwnProperty;</div><div class="line"></div><div class="line">Animal = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Animal.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">meters</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> alert(<span class="keyword">this</span>.name + (<span class="string">" moved "</span> + meters + <span class="string">"m."</span>));</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Animal;</div><div class="line"></div><div class="line">&#125;)();</div><div class="line"></div><div class="line">Cat = (<span class="function"><span class="keyword">function</span>(<span class="params">superClass</span>) </span>&#123;</div><div class="line">  extend(Cat, superClass);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Cat.__super__.constructor.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Cat.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"mow..."</span>);</div><div class="line">    <span class="keyword">return</span> Cat.__super__.move.call(<span class="keyword">this</span>, <span class="number">5</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Cat;</div><div class="line"></div><div class="line">&#125;)(Animal);</div><div class="line"></div><div class="line">Mice = (<span class="function"><span class="keyword">function</span>(<span class="params">superClass</span>) </span>&#123;</div><div class="line">  extend(Mice, superClass);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Mice</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Mice.__super__.constructor.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Mice.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">"zhizhi..."</span>);</div><div class="line">    <span class="keyword">return</span> Mice.__super__.move.call(<span class="keyword">this</span>, <span class="number">45</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Mice;</div><div class="line"></div><div class="line">&#125;)(Animal);</div><div class="line"></div><div class="line">jerry = <span class="keyword">new</span> Cat(<span class="string">"Jerry the Cat"</span>);</div><div class="line"></div><div class="line">tom = <span class="keyword">new</span> Mice(<span class="string">"Tom the Mice"</span>);</div><div class="line"></div><div class="line">jerry.move();</div><div class="line"></div><div class="line">tom.move();</div></pre></td></tr></table></figure></p>
<p>从编译结果我们看到这种仿class模式有如下几个特点：</p>
<ol>
<li>需要一个constructor function</li>
<li>必须用new来进行初始化出一个实例来调用方法</li>
<li>在继承方面要人为制造一个super来指向被继承的class</li>
</ol>
<p>ES6中的class语法和coffeescript的封装形式极为相似，以上样例代码用ES6来写就是</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">  </div><div class="line">  constructor(name) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  move(meters) &#123;</div><div class="line">    <span class="keyword">return</span> alert(<span class="keyword">this</span>.name + <span class="string">"moved"</span> + meters)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line"></div><div class="line">  move(meter) &#123;</div><div class="line">    alert(<span class="string">"mow..."</span>);</div><div class="line">    <span class="keyword">super</span>.move(<span class="number">5</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mice</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line"></div><div class="line">  move(meter) &#123;</div><div class="line">    alert(<span class="string">"zhizhi..."</span>);</div><div class="line">    <span class="keyword">super</span>.move(<span class="number">45</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> jerry = <span class="keyword">new</span> <span class="type">Cat</span>(<span class="string">"Jerry the Cat"</span>),</div><div class="line"></div><div class="line">tom = <span class="keyword">new</span> <span class="type">Mice</span>(<span class="string">"Tom the Mice"</span>);</div><div class="line"></div><div class="line">jerry.move();</div><div class="line"></div><div class="line">tom.move();</div></pre></td></tr></table></figure>
<p>在ES6的class定稿之前，js社区中流行的仿class设计模式的目的其实是以它为基础实现oop思想中的继承（inheritance），封装（encapsulation），多态（polymorphism）。尽管现在有官方背书，这种方式也一直存在不小的争议。<br>两年前我曾翻过一遍Douglas Crockford的书<a href="http://shop.oreilly.com/product/9780596517748.do" target="_blank" rel="external">《JavaScript: The Good Parts》</a>，虽然看的似懂非懂，依稀记得Douglas Crockford在书中指出使用new的危害，且推崇Object.create()来代替contructor function。虽然DC是公认的js社区大拿，但他的这方面的观点并未被广泛接受，许多教授javascript编程的书本仍然将contructor function/new形式作为标准的OOP范例。<br>《JavaScript: The Good Parts》出版于2008年，而奇妙的是，作者DC也于早些年提倡在js中模仿基于类继承，比如这篇在2002年发表的博文<a href="http://javascript.crockford.com/inheritance.html" target="_blank" rel="external">classical inheritance in javascript</a>，当然作者在博文末尾有注明14年的js编程经验让他有了新的想法。</p>
<p>两年前我并没有完全理解DC的深意，直到接触了Eric Elliott的观点。Eric Elliott很鲜明的反对使用constructor function/new，主要原因我总结如下：</p>
<blockquote>
<ul>
<li>类继承(classical inheritance)和原型继承(prototype inheritance)从本质和语法都不一样，即使在js中模仿class继承，背后却还是得利用原型继承的那一套，这样做的js即不能发挥类语言的长处，又失去了js本身的灵活性。</li>
<li>如果滥用类的继承关系，在复杂的系统中会增加定位bug的在哪一层的难度，如果发现需要修改base class，恐怕所有相关的subclass也需要检查修改。</li>
<li><p>class的继承与被继承的关系是强耦合，不利于代码模块化，容易导致代码的重复。而且这种关系违背了以下经典的设计原则：<br><strong>针对接口编程，而不是针对实现编程。（program to an interface，not an implementation）</strong><br><strong>多用组合，少用继承。（favor object composition over class inheritance）</strong></p>
</li>
<li><p>在ES6标准之前，如果不使用严格模式，做实体化的时候忘记new，js引猩不会报错，但会引入难以察觉的bug（例如赋值给constructor里的this的上的属性变成了全局变量）。<br>[注1]: 这一点缺陷容易规避，作为论据的杀伤力较弱。如可以借助某些js lint工具做语法检查，或者在每个constructor function里都检查是否正确调用，如jQuery作者John Resig提出的方法<a href="http://ejohn.org/apps/learn/#36" target="_blank" rel="external">http://ejohn.org/apps/learn/#36</a></p>
</li>
<li><p>在传统的Class语言中，<code>instanceof</code>是用来检查object是否属于同一class的实体。貌似在js中也能用<code>instanceof</code>来检查object是否由同一个constructor function/new得来，但这个并不是100%值得信赖，如以下的例子</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> <span class="comment">&#123;&#125;</span></span></div><div class="line"><span class="title">var</span> <span class="title">bar</span> = <span class="comment">&#123; a: ‘a’&#125;</span>;</div><div class="line">foo.prototype = bar;</div><div class="line">baz = <span class="keyword">Object</span>.create(bar);</div><div class="line">baz instanceof foo <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>由此’instanceof’不能算是模仿class方式的优势之一，如果js开发者需要类似类型检查的功能，<code>duck typing</code>是更好的选择。</p>
</li>
</ul>
</blockquote>
<p>综述了各种class继承的不靠谱后，Eric Elliott推荐用factory function取代constructor来做对象的初始化，例如之前的例子可以写成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animalProto = &#123;</div><div class="line">  name: <span class="string">'animal'</span>,</div><div class="line">  move: <span class="function"><span class="keyword">function</span>(<span class="params">meters</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> alert(<span class="keyword">this</span>.name + <span class="string">"moved"</span> + meters);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> catFactory = <span class="function"><span class="keyword">function</span> <span class="title">catFactory</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">	<span class="comment">// 这里的_extend()是underscorejs里的方法，</span></div><div class="line">	<span class="comment">// 也可以用jQuey里的$.extend()代替,</span></div><div class="line">	<span class="comment">// 或者用ES6的Object.assign()</span></div><div class="line">  <span class="keyword">return</span> _.extend(<span class="built_in">Object</span>.create(animalProto), &#123;</div><div class="line">    name: name || animalProto.name,</div><div class="line">    animalType: <span class="string">'cat'</span>,</div><div class="line">    move: <span class="function"><span class="keyword">function</span>(<span class="params">meters</span>) </span>&#123;</div><div class="line">      alert(<span class="string">"mow..."</span>);</div><div class="line">      animalProto.move.call(<span class="keyword">this</span>,meters);</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> miceFactory = <span class="function"><span class="keyword">function</span> <span class="title">miceFactory</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> _.extend(<span class="built_in">Object</span>.create(animalProto), &#123;</div><div class="line">    name: name || animalProto.name,</div><div class="line">    animalType: <span class="string">'mice'</span>,</div><div class="line">    move: <span class="function"><span class="keyword">function</span>(<span class="params">meters</span>) </span>&#123;</div><div class="line">      alert(<span class="string">"zhizhi..."</span>);</div><div class="line">      animalProto.move.call(<span class="keyword">this</span>,meters);</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> jerry = catFactory(<span class="string">"jerry"</span>);</div><div class="line"><span class="keyword">var</span> tom = miceFactory(<span class="string">"tom"</span>);</div></pre></td></tr></table></figure>
<p>在以上例子中，<code>Object.create(animalProto)</code>的工作是将一个指定实例对象设置为另一个实例的原型并返回这个实例对象，这部分Eric Elliott叫<code>delegate prototypes</code>，或者用Kyle Simpson在《you dont know js》系列书籍里的叫法<code>OLOO（object linking to other object）</code>，<code>_.extend(）</code>的工作是将一个实例对象的属性复制到一个新实例对象，这部分被他命名为<code>concatenative inheritance</code>。</p>
<p>一般的js开发者可能感觉到constructor/new仍旧是目前通行的做法，这是事实，但Eric Elliott指出工厂模式在各个影响广泛的js库或者框架中的应用极为普遍：</p>
<ul>
<li>jquery的选择器就符合工厂模式的定义；</li>
<li>reactjs中React.createclass();</li>
<li>angular中各种factory;</li>
<li>nodejs的核心库http.createserver()，以及中间件框架express也是运用工厂模式。</li>
</ul>
<p>constructor function/new支持者的一个重要论据是js引擎例如v8对new做过优化，用new产生新的实例对象要比Object.create（）快得多。对此Eric认为相关的性能差距并不足以大到成为一个js应用的瓶颈。具体一点说，通常我们用profile工具检查出的性能瓶颈往往在于加载速度，网络条件，文件I/O，渲染速度，先解决那些首要瓶颈后才可能开始考虑new和Object.create()谁快谁慢这种微小优化。而且很多设计实验来测量比较new和object。create快慢的代码需要循环几百，上千次才能看到一点点时间上的差异，这种差异在一般用户的感觉中是微乎其微的。</p>
<p>根据Eric Elliott的自述，他和许多js用户一样，最初的编程生涯来自于c＋＋，java，即使是拥有这些天生支持class语言的开发背景，再转到js，做了无数个项目后体验到class继承思想种种弊病，才开始鼓吹剔除class概念，拥抱更简单优雅，更能发挥js灵活性的编程方式。只不过按照目前的趋势，他代表的这部分的人观点尚未被js社区广泛接受，毕竟new/constructor function或者说ES6的class和诸多js的“坑”是官方支持的语言功能，可以预见的是，未来十年内，仍旧会有许多new/constructor VS class的优劣争论。</p>
<p>相关参考：</p>
<ol>
<li><a href="http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/" target="_blank" rel="external">Fluent JavaScript – Three Different Kinds Of Prototypal OO</a></li>
<li><a href="https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a#.vxbi3ue2l" target="_blank" rel="external">Common Misconceptions About Inheritance in JavaScript</a></li>
</ol>
<p>本文只是尝试在反class的角度做一个小的总结，个人推荐Kyle Simpson的著作<a href="https://github.com/getify/You-Dont-Know-JS/tree/master/this%20&amp;%20object%20prototypes" target="_blank" rel="external">You Dont Know JS this and Object Prototypes</a>，他在书中对js模仿class设计的编程方式的弊病有更详细的实例分析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年刚定稿的ECMAScript6(以下简称ES6)里，前所未有的引入了class的概念。我们都知道javascript从诞生之初就不是基于class的语言，但随着它越来越流行，使用者越来越多的过程中，关于如何用javascript进行面向对象编程(OOP)的理论也在实践中
    
    </summary>
    
      <category term="javascript" scheme="http://woodpig07.github.io/categories/javascript/"/>
    
      <category term="object oriented programming" scheme="http://woodpig07.github.io/categories/javascript/object-oriented-programming/"/>
    
    
      <category term="javascript" scheme="http://woodpig07.github.io/tags/javascript/"/>
    
      <category term="class inheritance" scheme="http://woodpig07.github.io/tags/class-inheritance/"/>
    
  </entry>
  
  <entry>
    <title>优化scroll, resize事件的小方法</title>
    <link href="http://woodpig07.github.io/2015/09/28/a-tip-on-optimizing-scroll-or-resize-event/"/>
    <id>http://woodpig07.github.io/2015/09/28/a-tip-on-optimizing-scroll-or-resize-event/</id>
    <published>2015-09-28T06:22:29.000Z</published>
    <updated>2016-08-11T15:12:17.134Z</updated>
    
    <content type="html"><![CDATA[<p>最近的某个项目中，设计上需要针对页面的scroll和resize事件中加入许多个交互行为。一般来说用户触发的scroll和resize的行为都是持续不断的发生的，如果在此期间直接执行多个绑定在scroll或者resize事件的复杂处理程序，对于浏览器性能是极大的消耗。</p>
<p>其实很早业界就对此已经有了成熟的应对方案，比如underscorejs的<strong><a href="http://underscorejs.org/#throttle" target="_blank" rel="external">throttle</a></strong>和<strong><a href="http://underscorejs.org/#debounce" target="_blank" rel="external">debounce</a></strong>，但我们想应用的是jQuery的作者John Resig在他一篇<a href="http://ejohn.org/blog/learning-from-twitter/" target="_blank" rel="external">博文</a>中提到的方法:</p>
<blockquote>
<p>It’s a very, very, bad idea to attach handlers to the window scroll event. Depending upon the browser the scroll event can fire a lot and putting code in the scroll callback will slow down any attempts to scroll the page (not a good idea). Any performance degradation in the scroll handler(s) as a result will only compound the performance of scrolling overall. Instead it’s much better to use some form of a timer to check every X milliseconds OR to attach a scroll event and only run your code after a delay (or even after a given number of executions – and then a delay).</p>
</blockquote>
<p>还有一个问题是，我们需要绑定的scroll和resize handlers分布在不同的模块里，难道优化代码要在所有的相关模块里写一遍吗？同事想到了一个用一个对象统一管理的方法，然后我把它改造成一个真正的singleton：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 依赖jQuery</span></div><div class="line"><span class="keyword">var</span> WindowEventsCtrl;</div><div class="line"></div><div class="line">WindowEventsCtrl = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> instance, WindowEvents, getInstance;</div><div class="line"></div><div class="line">  <span class="comment">// constructor 构造函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">WindowEvents</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.resizeCallbacks = [];</div><div class="line">    <span class="keyword">this</span>.scrollCallbacks = [];</div><div class="line">    <span class="keyword">this</span>.resized = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">this</span>.scrolled = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">this</span>.addListeners();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  WindowEvents.prototype.addCallback = <span class="function"><span class="keyword">function</span><span class="params">(ev, callback, context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ev === <span class="string">"resize"</span> &amp;&amp; typeof <span class="keyword">callback</span> === <span class="string">"function"</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.resizeCallbacks.push(&#123;</div><div class="line">        <span class="keyword">callback</span>: <span class="keyword">callback</span>,</div><div class="line">        context: context</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ev === <span class="string">"scroll"</span> &amp;&amp; typeof <span class="keyword">callback</span> === <span class="string">"function"</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.scrollCallbacks.push(&#123;</div><div class="line">        <span class="keyword">callback</span>: <span class="keyword">callback</span>,</div><div class="line">        context: context</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  WindowEvents.prototype.removeCallback = <span class="function"><span class="keyword">function</span><span class="params">(ev, callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ev === <span class="string">"resize"</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.resizeCallbacks = <span class="keyword">this</span>.resizeCallbacks.filter(<span class="function"><span class="keyword">function</span><span class="params">(item)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> item.<span class="keyword">callback</span> !== <span class="keyword">callback</span>;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ev === <span class="string">"scroll"</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.scrollCallbacks = <span class="keyword">this</span>.scrollCallbacks.filter(<span class="function"><span class="keyword">function</span><span class="params">(item)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> item.<span class="keyword">callback</span> !== <span class="keyword">callback</span>;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  WindowEvents.prototype.addListeners = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    $(window).on(<span class="string">"resize"</span>, (<span class="function"><span class="keyword">function</span><span class="params">(_this)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        _this.resized = <span class="literal">true</span>;</div><div class="line">      &#125;;</div><div class="line">    &#125;)(<span class="keyword">this</span>));</div><div class="line">    $(window).on(<span class="string">"scroll"</span>, (<span class="function"><span class="keyword">function</span><span class="params">(_this)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        _this.scrolled = <span class="literal">true</span>;</div><div class="line">      &#125;;</div><div class="line">    &#125;)(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">    setInterval((<span class="function"><span class="keyword">function</span><span class="params">(_this)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (_this.resized) &#123;</div><div class="line">          _this.runResizeCallbacks();</div><div class="line">          _this.resized = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (_this.scrolled) &#123;</div><div class="line">          _this.runScrollCallbacks();</div><div class="line">          _this.scrolled = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line">    &#125;)(<span class="keyword">this</span>), <span class="number">250</span>);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  WindowEvents.prototype.runResizeCallbacks = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">callback</span>, i, len, ref;</div><div class="line">    ref = <span class="keyword">this</span>.resizeCallbacks;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, len = ref.length; i &lt; len; i++) &#123;</div><div class="line">      <span class="keyword">callback</span> = ref[i];</div><div class="line">      <span class="keyword">callback</span>.<span class="keyword">callback</span>.apply(<span class="keyword">callback</span>.context);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  WindowEvents.prototype.runScrollCallbacks = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">callback</span>, i, len, ref;</div><div class="line">    ref = <span class="keyword">this</span>.scrollCallbacks;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, len = ref.length; i &lt; len; i++) &#123;</div><div class="line">      <span class="keyword">callback</span> = ref[i];</div><div class="line">      <span class="keyword">callback</span>.<span class="keyword">callback</span>.apply(<span class="keyword">callback</span>.context);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  getInstance = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!instance) &#123;</div><div class="line">      instance = <span class="keyword">new</span> WindowEvents();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> getInstance();</div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>我们这样用<code>WindowEventsCtrl</code>来绑定事件处理程序：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> resizeHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"resize event!"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">WindowEventsCtrl.addCallback(<span class="string">"resize"</span>, resizeHandler);</div></pre></td></tr></table></figure></p>
<p>注意    <code>WindowEventsCtrl.addCallback()</code>的第三个参数是用来绑定this的，这里用在较为复杂的模块中也比较方便。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ScrollComp;</div><div class="line"></div><div class="line">ScrollComp = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ScrollComp</span>(<span class="params">selector, WindowEventsCtrl</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.selector = selector;</div><div class="line">    <span class="keyword">this</span>.initialHeight = selector.height();</div><div class="line">    <span class="keyword">this</span>.setHeight();</div><div class="line">    WindowEventsCtrl.addCallback(<span class="string">"scroll"</span>, <span class="keyword">this</span>.setHeight, <span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ScrollComp.prototype.setHeight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> h;</div><div class="line">    h = <span class="keyword">this</span>.initialHeight + <span class="keyword">this</span>.selector.scrollTop() * <span class="number">0.01</span>;</div><div class="line">    <span class="keyword">this</span>.selector.height(h);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> ScrollComp;</div><div class="line"></div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 用法</span></div><div class="line">$(<span class="string">"scroll-comp-container"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, el</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ScrollComp($(el), WindowEventsCtrl);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的某个项目中，设计上需要针对页面的scroll和resize事件中加入许多个交互行为。一般来说用户触发的scroll和resize的行为都是持续不断的发生的，如果在此期间直接执行多个绑定在scroll或者resize事件的复杂处理程序，对于浏览器性能是极大的消耗。&lt;/p
    
    </summary>
    
      <category term="web development" scheme="http://woodpig07.github.io/categories/web-development/"/>
    
      <category term="javascript" scheme="http://woodpig07.github.io/categories/web-development/javascript/"/>
    
    
      <category term="javascript" scheme="http://woodpig07.github.io/tags/javascript/"/>
    
      <category term="event handler" scheme="http://woodpig07.github.io/tags/event-handler/"/>
    
      <category term="optimization" scheme="http://woodpig07.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>用React实现一个在线商城，小结（3）</title>
    <link href="http://woodpig07.github.io/2015/09/03/implementing-an-online-store-with-Reactjs-summary-3/"/>
    <id>http://woodpig07.github.io/2015/09/03/implementing-an-online-store-with-Reactjs-summary-3/</id>
    <published>2015-09-03T09:21:56.000Z</published>
    <updated>2016-08-11T15:18:18.634Z</updated>
    
    <content type="html"><![CDATA[<p>接上<a href="/2015/08/29/implementing-an-online-store-with-Reactjs-summary-2/">用React实现一个在线商城，小结（2）</a></p>
<hr>
<h2 id="继续说坑的事"><a href="#继续说坑的事" class="headerlink" title="继续说坑的事"></a>继续说坑的事</h2><p>在掌握React component基本思路，理清flux架构，趟过之前提到的两个坑后，开发出商品展示，排序，筛选后，继续开发购物清单的增加和删改就是效率很高的事。到了业务逻辑开发工作基本完成的阶段，我开始考虑如何在React里使用动画效果。<br>React官方提供了使用CSS3动画的addon - <a href="http://facebook.github.io/react/docs/animation.html" target="_blank" rel="external">ReactCSSTransitionGroup</a>,类似与Angularjs的思路，就是给需要动画效果的component加上标识不同状态的CSS class，剩下由开发者填充动画样式代码。<br>按照官网文档给的示例，我把ProductList里的product部分用<code>ReactCSSTransitionGroup</code>包裹起来，而且因为我只需要在筛选list的时候，单个product出现是显示动画，被移除时候无动画，我还加了<code>transitionLeave={false}</code><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"># 部分productList代码</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"products"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ReactCSSTransitionGroup</span> <span class="attr">transitionName</span>=<span class="string">"product"</span> <span class="attr">transitionLeave</span>=</span><span class="template-variable">&#123;false&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">              <span class="template-variable">&#123;items&#125;</span><span class="xml"></span></div><div class="line">            <span class="tag">&lt;/<span class="name">ReactCSSTransitionGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 部分stylus代码</span></div><div class="line"><span class="selector-class">.product-enter</span></div><div class="line">  <span class="attribute">opacity</span>  <span class="number">0</span></div><div class="line">  </div><div class="line">  &amp;<span class="selector-class">.product-enter-active</span></div><div class="line">    <span class="attribute">opacity</span>   <span class="number">1</span></div><div class="line">    <span class="attribute">transition</span>  opacity <span class="number">300ms</span> ease-in</div></pre></td></tr></table></figure>
<p>马上问题来了，第一次刷新时加载product确实有渐进出现的动画，但改变筛选条件后，应该被移除的product仍旧在那里！我试着去掉<code>transitionLeave={false}</code>，加上product移除时候的opacity从1变0动画，这时理应被移除的product倒是被移除了，但移除瞬间不到一秒的闪退动画效果十分扎眼，并不是我想要的。也试过把移除动画的transition-time设为0,统统都会产生应该消失的product持续留在渲染区里。<br>Google上一搜，才知ReactCSSTransitionGroup的坑爹bug很多人遇到过<br><a href="https://github.com/facebook/react/issues/1707" target="_blank" rel="external">ReactCSSTransitionGroup leaves DOM nodes with both <code>leave</code> and <code>enter</code> classes</a><br><a href="https://github.com/facebook/react/issues/1326" target="_blank" rel="external">CSSTransitionGroup buggy due to transition events not firing reliably</a></p>
<p>究其原因大概就是ReactCSSTransitionGroup使用transitionend事件来判断component动画是否完成，完成后再从DOM中删除component。但是浏览器的transitionend事件很不可靠，很多情况下都不触发，导致该删除的component依然存在与DOM里。<br>在这里吐嘲一下，关于ReactCSSTransitionGroup的bug在14年3月报出后，直到我写这个项目的15年8月份，官方一直没有解决，也许官方觉得动画这个功能太无足轻重？倒是社区开发者提出了可靠的加强方案<a href="https://github.com/Khan/react-components/blob/master/js/timeout-transition-group.jsx" target="_blank" rel="external">TimeoutTransitionGroup</a>。<br><code>TimeoutTransitionGroup</code>的原理是用人为定义的timeout来决定什么后动画完成移除component，比如说我需要product只显示300毫秒的出现动画，无移除动画，可以如下设置：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"products"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">TimeoutTransitionGroup</span> <span class="attr">transitionName</span>=<span class="string">"product"</span> <span class="attr">enterTimeout</span>=</span><span class="template-variable">&#123;300&#125;</span><span class="xml"><span class="tag"> <span class="attr">leaveTimeout</span>=</span></span><span class="template-variable">&#123;0&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">    <span class="template-variable">&#123;items&#125;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;/<span class="name">TimeoutTransitionGroup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="与旧有模块结合使用"><a href="#与旧有模块结合使用" class="headerlink" title="与旧有模块结合使用"></a>与旧有模块结合使用</h2><p>象Angularjs这种早先流行的框架，被人诟病的缺点之一是它很难与第三方库配合使用。而作为后起之秀的Reactjs自称的卖点之一即是容易和第三方库结合。但从官方给出的<a href="http://facebook.github.io/react/tips/use-react-with-other-libraries.html" target="_blank" rel="external">示例</a>来说，我认为容易度还是打了折扣。<br>按照官方指导，如果你想用react的方式写一个类似bootstrap框架里的Tooltip, accordion menu, 你还是得在<code>componentDidMount</code> 或者<code>componentDidUpdate</code>引入第三库（如jQuery）的方法，如果是需要注册event listener，为了避免内存泄漏，你还得在<code>componentWillUnmount</code>做一些清理工作。<br>有的时候迁移一个项目到react，你会希望能够利用react做它擅长的事，同时也能重复利用原有的成熟模块。例如我有一个现成的Expandable Menu是用jQuery写的，复用性良好。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coffeescript代码</span></div><div class="line"><span class="comment"># 省略了方法细节</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpandableMenu</span></span></div><div class="line">   defaults = &#123;&#125;</div><div class="line"></div><div class="line">  constructor: <span class="function"><span class="params">(@selector, options)</span>-&gt;</span></div><div class="line">    @options = $.extend <span class="literal">true</span>, &#123;&#125;, defaults, options</div><div class="line">    @selector.<span class="literal">on</span> <span class="string">'click'</span>, <span class="string">'.expandable &gt; .title'</span>, @onClickHeader</div><div class="line">    @selector.<span class="literal">on</span> <span class="string">'click'</span>, <span class="string">'.expandable .expandable-close'</span>, @onClickClose</div><div class="line"></div><div class="line"></div><div class="line">  onClickHeader: <span class="function"><span class="params">(click)</span>=&gt;</span></div><div class="line">	<span class="comment"># 打开menu的handler</span></div><div class="line"></div><div class="line">  onClickClose: <span class="function"><span class="params">(click)</span>=&gt;</span></div><div class="line">	<span class="comment"># 关闭menu的handler</span></div><div class="line"></div><div class="line">  toggleContent: <span class="function"><span class="params">(el)</span>=&gt;</span></div><div class="line"></div><div class="line">    </div><div class="line">  isExpanded: <span class="function"><span class="params">(el)</span>-&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  expand: <span class="function"><span class="params">(el)</span>-&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  collapse: <span class="function"><span class="params">(el)</span>-&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  collapseOthers: <span class="function"><span class="params">(el)</span>-&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">global</span>.Expand = ExpandableMenu</div></pre></td></tr></table></figure></p>
<p>用传统的方式，我这样初始化一个Expandable menu<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> menu = <span class="keyword">new</span> Expand($(<span class="string">".menu-class-name"</span>));</div></pre></td></tr></table></figure></p>
<p>但在为了把它改造成react component，貌似我必须如此：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 用React.findDOMNode来实现expand，collapse逻辑...</span></div><div class="line"></div><div class="line"> componentDidMount: <span class="function">-&gt;</span></div><div class="line"></div><div class="line">   <span class="comment"># 在这里添加click的event listener</span></div><div class="line"></div><div class="line"> componentWillUnmount: <span class="function">-&gt;</span></div><div class="line"></div><div class="line">   <span class="comment"># 在这里移除event listener</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">render: <span class="function">-&gt;</span></div><div class="line">	<span class="comment"># 在这里设好ref</span></div></pre></td></tr></table></figure></p>
<p>于是我想，这里其实我最需要解决的是移除event listener的问题，那么在原有模块里增加一个移除的方法就好了：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">destructor</span>:</span> (el)-&gt;</div><div class="line">  <span class="keyword">if</span> !el?</div><div class="line">    el = @selector</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">if</span> typeof el.jquery != <span class="string">'undefined'</span></div><div class="line">      el = $ el</div><div class="line">  el.off()</div></pre></td></tr></table></figure></p>
<p>如此以来，我可以直接在<code>componentDidMoun</code>里初始化class，在<code>componentWillUnmount</code>里做销毁：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">componentDidMount</span>: -&gt;</div><div class="line"></div><div class="line"><span class="stylus">  window<span class="selector-class">.expandableListCategories</span> = new Expand $(<span class="string">".xxxx"</span>)</span></div><div class="line"></div><div class="line">componentWillUnmount: -&gt;</div><div class="line"></div><div class="line">  window<span class="selector-class">.expandableListCategories</span><span class="selector-class">.destructor</span>()</div></pre></td></tr></table></figure></p>
<p>其他无需再多一行代码，岂不妙哉～</p>
<h2 id="小结的总结"><a href="#小结的总结" class="headerlink" title="小结的总结"></a>小结的总结</h2><p>项目做到现在的阶段，虽然还只是一个试图用reactjs改造传统电商网站的粗浅尝试，但也遇到了一些一般reactjs入门介绍文章鲜少提到的挑战，在此分享一点个人的实践经验，纯当抛砖引玉了。</p>
<p>我在2014年末感觉到前端圈里开始越来越多的提到Reactjs，似乎大家都为它在性能方面的提升而兴奋惊讶。大半年之后我终于有兴趣和精力去学习实践这一个年轻框架，确实它的思路相对其他成熟的流行框架非常新颖，对于需要频繁更新DOM内容的应用场景，性能和开发速度方面的优势也显而易见。<br>而且它和第三方库配合的易用性，它的上手容易度会吸引不少熟悉jQuery的前端开发人员。但个人感觉，毕竟reactjs还是有一定体量的框架，要在复杂的大型项目中吧reactjs的优势发挥到极致，还需要把依赖于jQuery那一部分功能做进一步精简。可以预见的是，未来reactjs的发展就靠这方面造轮子的速度和质量了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上&lt;a href=&quot;/2015/08/29/implementing-an-online-store-with-Reactjs-summary-2/&quot;&gt;用React实现一个在线商城，小结（2）&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;继续说坑的事&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="web development" scheme="http://woodpig07.github.io/categories/web-development/"/>
    
      <category term="javascript" scheme="http://woodpig07.github.io/categories/web-development/javascript/"/>
    
    
      <category term="javascript" scheme="http://woodpig07.github.io/tags/javascript/"/>
    
      <category term="reactjs" scheme="http://woodpig07.github.io/tags/reactjs/"/>
    
      <category term="webapp" scheme="http://woodpig07.github.io/tags/webapp/"/>
    
  </entry>
  
  <entry>
    <title>用React实现一个在线商城，小结（2）</title>
    <link href="http://woodpig07.github.io/2015/08/29/implementing-an-online-store-with-Reactjs-summary-2/"/>
    <id>http://woodpig07.github.io/2015/08/29/implementing-an-online-store-with-Reactjs-summary-2/</id>
    <published>2015-08-29T09:30:04.000Z</published>
    <updated>2016-08-11T15:16:31.030Z</updated>
    
    <content type="html"><![CDATA[<p>接上<a href="/2015/08/22/implementing-a-online-store-with-Reactjs/">用React实现一个在线商城，小结（1）</a></p>
<hr>
<h2 id="新手需要趟过的坑"><a href="#新手需要趟过的坑" class="headerlink" title="新手需要趟过的坑"></a>新手需要趟过的坑</h2><p>即使是刚开始照着各种例子教程上手reactjs，不可避免的都遇到以数组来动态渲染child component，以下这个例子截取自facebook官方<a href="http://facebook.github.io/react/docs/tutorial.html" target="_blank" rel="external">tutorial</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// tutorial10.js</span></div><div class="line"><span class="keyword">var</span> CommentList = React.createClass(&#123;</div><div class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> commentNodes = <span class="keyword">this</span>.props.data.map(<span class="function"><span class="keyword">function</span> (<span class="params">comment</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Comment</span> <span class="attr">author</span>=<span class="string">&#123;comment.author&#125;</span>&gt;</span></span></div><div class="line">          &#123;comment.text&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">Comment</span>&gt;</span></div><div class="line">      );</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"commentList"</span>&gt;</span></span></div><div class="line">        &#123;commentNodes&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>本项目中运用到这个方法的场景也非常多，例如商品展示区就是把获取到和product list数组在product parent compoent中渲染出来。<br>然而，当你打开你网页的dev tool，你会注意到在console这一栏赫然有一行warning:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Each child <span class="keyword">in</span> <span class="keyword">an</span> array <span class="keyword">or</span> iterator should have <span class="keyword">a</span> unique <span class="string">"key"</span> prop. Check <span class="keyword">the</span> render method <span class="keyword">of</span> &lt;ProductParentComponent&gt;. See <span class="keyword">https</span>://fb.me/react-warning-<span class="built_in">keys</span> <span class="keyword">for</span> more information.</div></pre></td></tr></table></figure></p>
<p>这时候如果你忽略这个警告，继续给商品展示区添加排序，筛选功能，逐渐会发现这些功能不会像你设想的那样渲染出准确的结果。原因就是这个key，官网文档<a href="http://facebook.github.io/react/docs/multiple-components.html#dynamic-children" target="_blank" rel="external">某处</a>有提到它的重要性:</p>
<blockquote>
<p>The situation gets more complicated when the children are shuffled around (as in search results) or if new components are added onto the front of the list (as in streams). In these cases where the identity and state of each child must be maintained across render passes, you can uniquely identify each child by assigning it a key:<br>When React reconciles the keyed children, it will ensure that any child with key will be reordered (instead of clobbered) or destroyed (instead of reused).</p>
</blockquote>
<p>我的理解是react会通过child component的key来识别parent component各种状态下是不是该重新排列或者销毁，所以key对于统一层级的child component必须是独一无二的。我曾实验过把故意把两个product component赋予相同的key，结果在渲染的时候，react只会显示其中一个。<br>以上文档还强调key必须在在包含child component数组的那个parent component里指定才会有作用。</p>
<blockquote>
<p>The key should always be supplied directly to the components in the array, not to the container HTML child of each component in the array:</p>
</blockquote>
<p>关于<strong>key的重要性</strong>不是所有react入门文章都会强调，在此提醒和我一样的新手。</p>
<p>另外一个有可能遇到又比较微妙的坑是关于<strong>props和state</strong>的。用我自己笼统的通俗的话将，props是用来在component之间传递参数的，state是component内部记录状态的。我理解到的reactjs原理之一就是，如果某个component的props或者state发生变化，就会触发component的re-render，但是事实上没有这么简单。</p>
<p>以我在商品展示区左边的分类功能为例，左上角部分把商品分为WINE, SPIRIT, BEER三大类，每一个类别下又分小类，点击每个小类的链接后，页面的url会随之改变，右边的商品部分会显示那一个小类别下的list，左边下侧的REFINE RESULT会按这个类别的商品里有的brand和其他标签来改变能够做筛选的label。<br><img src="project_image1.png" alt="project_image1"></p>
<p>一开始，REFINE RESULT下面每个refine label group是这么写的<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">RefineGroup = React.createClass</div><div class="line">  <span class="comment"># 在coffeescript里"@"等于"this."</span></div><div class="line">  getInitialState: <span class="function">-&gt;</span></div><div class="line">    selectedItems: @props.selectedRefiners</div><div class="line">    itemList: @props.items</div><div class="line"></div><div class="line">  handleClick: <span class="function"><span class="params">(event)</span> -&gt;</span></div><div class="line">		<span class="comment"># 省略代码...</span></div><div class="line"></div><div class="line">  clearAll: <span class="function"><span class="params">(event)</span>-&gt;</span></div><div class="line">		<span class="comment"># 省略代码...</span></div><div class="line"></div><div class="line">  handleInput: <span class="function"><span class="params">(event)</span> -&gt;</span></div><div class="line">		<span class="comment"># 省略代码...</span></div><div class="line"></div><div class="line">  render: <span class="function">-&gt;</span></div><div class="line"></div><div class="line">    lists = @state.itemList.map (item, index) =&gt;</div><div class="line">      itemId = @props.category + index</div><div class="line"></div><div class="line">      <span class="keyword">return</span>  &lt;li className=<span class="string">"refine"</span> key=&#123;item&#125;&gt;&lt;label className=<span class="string">"cfe"</span>&gt;</div><div class="line">                &lt;input type=<span class="string">"checkbox"</span> value=&#123;item&#125; className=<span class="string">"cfe-styled"</span> id=&#123;itemId&#125; onChange=&#123;<span class="keyword">this</span>.handleClick&#125; checked=&#123;itemId <span class="keyword">of</span> @state.selectedItems &#125; /&gt;</div><div class="line">                &#123;item&#125;</div><div class="line">              &lt;/label&gt;&lt;/li&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span>  &lt;ul className=<span class="string">"submenu"</span>&gt;</div><div class="line">              &lt;div className=<span class="string">"searchbox"</span>&gt;</div><div class="line">                &lt;div className=<span class="string">"control-group search"</span>&gt;</div><div class="line">                  &lt;input type=<span class="string">"text"</span> className=<span class="string">"normal placeholder"</span> onChange=&#123;<span class="keyword">this</span>.handleInput&#125; placeholder=&#123;<span class="keyword">this</span>.props.category&#125; /&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">              &lt;/div&gt;</div><div class="line">              &#123;lists&#125;</div><div class="line">              &lt;a href=<span class="string">"#"</span> className=<span class="string">"title reverse clear-selection"</span> onClick=&#123;<span class="keyword">this</span>.clearAll&#125;&gt; clear selection &lt;/a&gt;</div><div class="line">            &lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>在其parent component里这个RefineGroup是这么写的：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RefineGroup</span> <span class="attr">items</span>=<span class="string">&#123;items&#125;</span></span></div><div class="line">  <span class="attr">selectedRefiners</span>=<span class="string">&#123;this.state.selectedRefiners&#125;</span></div><div class="line">  <span class="attr">category</span>=<span class="string">&#123;prop&#125;</span></div><div class="line">  <span class="attr">categoryID</span>=<span class="string">&#123;prop&#125;</span></div><div class="line">  <span class="attr">key</span>=<span class="string">&#123;prop.id&#125;</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>你可以看到，RefineGroup从props里拿到items（就是每个label下的标签清单）后，在render之前通过调用getInitialState()赋值给state.itemList，然后在render方法里用state.itemList来加工出最后要渲染出的内容。<br>马上我发现，只有第一次点击某个商品类别显示的REFINE RESULT里呈现正确的label group，之后点击其他商品类别，即使页面右边的商品list呈现正确的内容，refine label group就不会随着变化，除非你手动F5将页面刷新。这个现象说明要么RefineGroup的re-render没有被触发，要么触发了但发生了意外。<br>为了诊断问题，我在RefineGroup的render方面上加入console.log(this.props.items)，测试表明this.props.items确实是随着商品类别页变化而变化的，并且也会触发re-render，但不re-render不一定会触发getInitialState()，所以@state.itemList的内容不会变化。当然我可以把render方法里的@state.itemList换成@props.items来解决，不过这样一来就不能配合@handleInput()的变化来实现另外一个功能。<br>我在这个地方纠结了一段时间，直到我读到react component life cycle里的一个较少提及的方法componentWillReceiveProps，这个方法会在component接收到新props时候调用，正好是我需要在RefineGroup里定义的：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">componentWillReceiveProps</span>: -&gt;</div><div class="line">  <span class="variable">@setState</span></div><div class="line">    <span class="attribute">itemList</span>: <span class="variable">@props</span>.items</div></pre></td></tr></table></figure></p>
<p>短短三行代码，问题优雅的解决了。</p>
<h2 id="官网某篇文档Props-in-getInitialState-Is-an-Anti-Pattern说在getInitialState-中使用props赋值的危险，除非只是用props来做state属性的初始化。我遇到这个场景正好是一个需要用props在getInitialState-中做状态初始化，又需要和props中对应值同步的例子。"><a href="#官网某篇文档Props-in-getInitialState-Is-an-Anti-Pattern说在getInitialState-中使用props赋值的危险，除非只是用props来做state属性的初始化。我遇到这个场景正好是一个需要用props在getInitialState-中做状态初始化，又需要和props中对应值同步的例子。" class="headerlink" title="官网某篇文档Props in getInitialState Is an Anti-Pattern说在getInitialState()中使用props赋值的危险，除非只是用props来做state属性的初始化。我遇到这个场景正好是一个需要用props在getInitialState()中做状态初始化，又需要和props中对应值同步的例子。"></a>官网某篇文档<a href="https://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html" target="_blank" rel="external">Props in getInitialState Is an Anti-Pattern</a>说在getInitialState()中使用props赋值的危险，除非只是用props来做state属性的初始化。我遇到这个场景正好是一个需要用props在getInitialState()中做状态初始化，又需要和props中对应值同步的例子。</h2><p>下文 <a href="/2015/09/03/implementing-a-online-store-with-Reactjs-summary-3/">用React实现一个在线商城，小结（3）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上&lt;a href=&quot;/2015/08/22/implementing-a-online-store-with-Reactjs/&quot;&gt;用React实现一个在线商城，小结（1）&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;新手需要趟过的坑&quot;&gt;&lt;a href=&quot;#新手需要趟过的坑&quot;
    
    </summary>
    
      <category term="web development" scheme="http://woodpig07.github.io/categories/web-development/"/>
    
      <category term="javascript" scheme="http://woodpig07.github.io/categories/web-development/javascript/"/>
    
    
      <category term="javascript" scheme="http://woodpig07.github.io/tags/javascript/"/>
    
      <category term="reactjs" scheme="http://woodpig07.github.io/tags/reactjs/"/>
    
      <category term="webapp" scheme="http://woodpig07.github.io/tags/webapp/"/>
    
  </entry>
  
  <entry>
    <title>用React实现一个在线商城，小结（1）</title>
    <link href="http://woodpig07.github.io/2015/08/22/implementing-an-online-store-with-Reactjs/"/>
    <id>http://woodpig07.github.io/2015/08/22/implementing-an-online-store-with-Reactjs/</id>
    <published>2015-08-22T07:44:45.000Z</published>
    <updated>2016-08-11T15:16:00.394Z</updated>
    
    <content type="html"><![CDATA[<p>这阵子在看Reactjs，正好之前有个电商项目的经历，我就想何不即学即用，用react去实现在线商城展示，分类查找筛选，加入购物车功能。这篇博文写出来的时候，项目的主要部分已经完成，放在github上，欢迎大家<a href="https://github.com/woodpig07/react-flux-shop" target="_blank" rel="external">参观</a>。</p>
<h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><p>一般建议从<a href="http://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="external">官方文档</a>开始。<br>facebook建立react的官网，貌似提供无比详尽的资料，不过大部分官方技术文档的特性之一就是，各知识点的组织方式并不一定适合初学者上手。如果你翻了几遍tutuial还是云里雾里，无法下手，我建议还是多找几篇网友写的几篇比较人性化的入门指导文章。<br>个人推荐：<br><a href="http://tylermcginnis.com/reactjs-tutorial-a-comprehensive-guide-to-building-apps-with-react/" target="_blank" rel="external">A Comprehensive Guide to Building Apps with React.js</a><br>和react有关的重要概念是flux，这里指的不是一个库或者框架，而是facebook提出来的一种组织react component应用的架构，基本上稍微复杂的react应用都会涉及。<br>官网上对此的介绍太理论话，还是直接看提供的<a href="https://facebook.github.io/flux/docs/todo-list.html" target="_blank" rel="external">样例</a>开始理解。或者看这篇网友写的指导<a href="https://www.codementor.io/reactjs/tutorial/react-js-flux-architecture-tutorial" target="_blank" rel="external">Creating a Simple Application Using React JS and Flux Architecture</a></p>
<p>react大热之后，常常被人拿出来和angularjs比较，其中一个较普遍的观点是react比angular容易学。想当年我学angularjs，是至少两个月中正儿八经翻了一本半angular的学习书籍才敢开始琢磨写实际项目的事。<br>也许是这一年的前端学习和磨炼让我更加自信，于是我花了两个星期的业余时间看了指导资料后开始投入开发。</p>
<h2 id="建立架构和工作流程"><a href="#建立架构和工作流程" class="headerlink" title="建立架构和工作流程"></a>建立架构和工作流程</h2><p>原有的项目涉及到coffeescript, stylus, jade, gulp, 我对这几个语言和工程化工具已经用的相当顺手，而且这个项目的目的在于运用reactjs，为了避免不必要学习成本，不会去找其他的替代品。<br>原先的项目缺少一个模块化管理和打包工具，这次我选择了browserify，即是因为我最近上手browserify有一段时间，也是因为某个reactjs tutorial里介绍的gulp和browserify整合方法。<br>另外很多reactjs相关文章推荐webpack，说是更适合reactjs里component开发的模式，但这东西貌似是走大而全路线的，学会熟悉配置也需时间，还是下次有机会再关注吧。<br>关于coffeescript还有一个小曲折，因为react里component的html模板使用JSX语法，需要编译工具转换为js，本来在gulp工作流里，gulp-reactify插件就很容易解决这事，用coffee的话，也有插件方便的转换coffee-react(cjsx文件）。但是如果一起由gulp-browserify开始,这些方案都缺少一环，都行不通。最开始这个问题弄得我焦头烂额，差点放弃coffee，最后找的一个方案救了我：watchify + browserify(非gulp插件） + coffee_reactify<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Compile coffeescript and transform jsx</span></div><div class="line"></div><div class="line">gulp.task <span class="string">"jsCompile"</span>, <span class="function">-&gt;</span></div><div class="line"></div><div class="line">  watcher = watchify browserify</div><div class="line">    entries: [config.src + <span class="string">"coffeescript/main.coffee"</span>]</div><div class="line">    transform: [coffee_reactify]</div><div class="line">    <span class="comment"># de<span class="doctag">bug:</span> true</span></div><div class="line"><span class="function"></span></div><div class="line">  <span class="title">rebundle</span> = -&gt;</div><div class="line">    watcher</div><div class="line">    .bundle()</div><div class="line">    .<span class="literal">on</span> <span class="string">"error"</span>, handleErrors</div><div class="line">    .pipe plumber()</div><div class="line">    .pipe source(<span class="string">"main.js"</span>)</div><div class="line">    .pipe gulpif config.production, streamify(uglify())</div><div class="line">    .pipe gulpif config.production, rename(<span class="string">"main.min.js"</span>)</div><div class="line">    .pipe gulp.dest config.build + <span class="string">"scripts"</span></div><div class="line"></div><div class="line">  watcher</div><div class="line">  .<span class="literal">on</span> <span class="string">"update"</span>, <span class="function">-&gt;</span></div><div class="line">    <span class="built_in">console</span>.log <span class="string">"browserify starting..."</span></div><div class="line">    rebundle()</div><div class="line">    <span class="built_in">console</span>.log <span class="string">"browserify updated!"</span></div><div class="line"></div><div class="line">  <span class="comment"># initial bundle when this task starts</span></div><div class="line">  rebundle()</div></pre></td></tr></table></figure></p>
<p>其中还有个小问题还没有想明白，就是如果我打开了browserify的debug模式，最后编译的文件会在末尾生产一大堆无意义的乱码，占据了差不多一半的文件大小，关掉debug就没事。</p>
<p>gulp流程搭建好后，剩下的是把原有项目中相关的stylus，jade，coffee文件剥离出来，还好原来的模块化做的不错，这部分很快完成了。</p>
<h2 id="从React-Component开始"><a href="#从React-Component开始" class="headerlink" title="从React Component开始"></a>从React Component开始</h2><p>React是以component 为单元开发，这样也给项目迁移带来便利，我可以挑某个小部分开始动手改造，暂时先不考虑全局。<br>第一步，我选的是商品展示(brand collection）页面的product listing这一块。product数据我用的是localStorage来生产mock data。基本上一个ProductList作为parent component,一个product作为child component就可以搞定了。<br>在React中，parent component和child component之间的数据传递直观而简单。这部分知识几乎在每一篇入门指导文章中都作出示例演示，官方文档也有专门的资料。<br><a href="http://facebook.github.io/react/docs/multiple-components.html" target="_blank" rel="external">Multiple components</a><br><a href="http://facebook.github.io/react/tips/communicate-between-components.html" target="_blank" rel="external">Communicate between components</a></p>
<p>但如果没有parent/child关系，事情就开始复杂起来了。例如当我开始改造全部商品展示页面左边的排序选项，选中的排序条件必须要传递到右边的product list来让其重新渲染，这时候就必须引入flux了。<br>理解flux架构是我在学习react的过程中花费时间更多的，主要是理清action, store, dispatcher, component之间的关系。也是因为官方flux实现的理解难度，有一些react社区开发者提出了替代方案，比如<a href="https://github.com/reflux/refluxjs" target="_blank" rel="external">reflux</a>,<a href="https://github.com/fdecampredon/rx-flux" target="_blank" rel="external">rx-flux</a>，雅虎团队还给出了一个衍生物<a href="https://github.com/yahoo/fluxible" target="_blank" rel="external">fluxible</a>。从初学者的角度，我觉得还是先熟悉flux之后再说。</p>
<h2 id="React-router"><a href="#React-router" class="headerlink" title="React-router"></a>React-router</h2><p>做完商品展示页面基本功能，下一步我考虑的是加上单个商品的详细页product details。既然是一个单页应用，那么就需要一个router的功能。大而全的spa框架如angularjs有提供ngRoute，react官方显然没有这种便利，但同时也给了社区参与者大展身手的机会。我选择了很多react社区人员都推荐的react-router。<br>仿造官网上的示例，brand collection和product details两部分的分页很快就设置好了。<br>截取样例代码如下：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">routes =</div><div class="line">  <span class="variable">&lt;Route handler=&#123;main&#125;&gt;</span></div><div class="line">    <span class="variable">&lt;Route name="brandCollection" path="/" handler=&#123;brandCollection&#125; /&gt;</span></div><div class="line">    <span class="variable">&lt;Route name="productDetails" path="/product/:id" handler=&#123;productDetails&#125; /&gt;</span></div><div class="line">  &lt;/Route&gt;</div><div class="line"></div><div class="line"></div><div class="line">ReactRouter.run routes, ReactRouter.HashLocation, (Root, <span class="keyword">state</span>) -&gt;</div><div class="line">  name = <span class="keyword">state</span>.path</div><div class="line">  <span class="keyword">default</span>ID = <span class="string">"brand-collection"</span></div><div class="line">  if name.indexOf(<span class="string">"/product"</span>) is <span class="number">0</span></div><div class="line">    <span class="keyword">default</span>ID = <span class="string">"product-details"</span></div><div class="line"></div><div class="line">  React.render <span class="variable">&lt;Root pageID=&#123;defaultID&#125; /&gt;</span>, document.getElementById <span class="string">"app-container"</span></div></pre></td></tr></table></figure></p>
<p>其中的main是brand collection,product details的父级container，在这一块需要指定一个router内容变换的区域，就是所谓的routehandler。例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Main = React<span class="selector-class">.createClass</span></div><div class="line"></div><div class="line">  getDefaultProps: -&gt;</div><div class="line">    pageID: <span class="string">"brand-collection"</span></div><div class="line"></div><div class="line">  render: -&gt; </div><div class="line">    return  &lt;<span class="selector-tag">div</span> className=<span class="string">"page"</span> id=&#123;this<span class="selector-class">.props</span><span class="selector-class">.pageID</span>&#125;&gt;</div><div class="line"></div><div class="line">                &lt;RouteHandler /&gt;</div><div class="line"></div><div class="line">              &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>值得一提的是，我需要在分页变化时候，为了配合原有的样式，main这一层级元素的id也需要随着变化，react-router虽然提供了分页的路径参数，但传递自定义参数并不是很方便。最后我只能根据路径参数的变化来判断需要传递的id，并以react component props的形式传递。</p>
<hr>
<p>下文 <a href="/2015/08/29/implementing-an-online-store-with-Reactjs-summary-2/">用React实现一个在线商城，小结（1）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这阵子在看Reactjs，正好之前有个电商项目的经历，我就想何不即学即用，用react去实现在线商城展示，分类查找筛选，加入购物车功能。这篇博文写出来的时候，项目的主要部分已经完成，放在github上，欢迎大家&lt;a href=&quot;https://github.com/wood
    
    </summary>
    
      <category term="web development" scheme="http://woodpig07.github.io/categories/web-development/"/>
    
      <category term="javascript" scheme="http://woodpig07.github.io/categories/web-development/javascript/"/>
    
    
      <category term="javascript" scheme="http://woodpig07.github.io/tags/javascript/"/>
    
      <category term="reactjs" scheme="http://woodpig07.github.io/tags/reactjs/"/>
    
      <category term="webapp" scheme="http://woodpig07.github.io/tags/webapp/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://woodpig07.github.io/2015/08/22/hello-world/"/>
    <id>http://woodpig07.github.io/2015/08/22/hello-world/</id>
    <published>2015-08-21T16:00:00.000Z</published>
    <updated>2016-08-08T13:52:36.997Z</updated>
    
    <content type="html"><![CDATA[<p>我用hexo搭建的技术博客开张啦！<br>themes选得是tranquilpeak，有些细节问题还需要打理一下。访客如果看到法语单词，或者不工作的链接，先包涵一下啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我用hexo搭建的技术博客开张啦！&lt;br&gt;themes选得是tranquilpeak，有些细节问题还需要打理一下。访客如果看到法语单词，或者不工作的链接，先包涵一下啦。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
